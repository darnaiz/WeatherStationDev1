from machine import I2Cfrom machine import Pinfrom machine import RTCfrom time import sleepfrom time import sleep_msfrom time import ticks_msfrom esp8266_i2c_lcd import I2cLcdimport networkimport dhtimport urequestsimport WorldClockp0 = Pin(4, Pin.OUT)p1 = Pin(17, Pin.OUT)d = dht.DHT11(Pin(16))i2c = I2C(scl=Pin(22), sda=Pin(21), freq=400000)lcd = I2cLcd(i2c, 0x27, 2, 16)lcd.backlight_off()lcd.clear()# FUNCION PARA LEER DHT11def readTemperature():    print("Iniciando lectura de temperatura y humedad")    data = [0,0]    try:        d.measure()        t = d.temperature()            h = d.humidity()                   print ("La temperatura es de " + str(t) + "ºC\n y la humedad del " + str(h) + "%.")        data[0] = t        data[1] = h        return data    except:        print("ERROR al realizar la lectura")    finally:        print("Fin leyendo datos")# FUNCIÓN PARA ESTABLECER LA CONEXIÓN WIFI (STATION)def do_connect(SSID, PASSWORD):    global sta_if    sta_if = network.WLAN(network.STA_IF)     # instancia el objeto -sta_if- para controlar la interfaz STA    if not sta_if.isconnected():              # si no existe conexión...        sta_if.active(True)                       # activa el interfaz STA del ESP32        sta_if.connect(SSID, PASSWORD)            # inicia la conexión con el AP        print("Conectando a la red", SSID +"...")        while not sta_if.isconnected():           # ...si no se ha establecido la conexión...            pass                                  # ...repite el bucle...    print("Configuración de red (IP/netmask/gw/DNS):", sta_if.ifconfig())    p0.value(1)    sleep(0.2)    p0.value(0)    sleep(0.2)    p0.value(1)    sleep(0.2)    p0.value(0)    # FUNCIÓN PARA ESTABLECER LA CONEXIÓN WIFI (STATION)def upload_temp_hum(SSID, PASSWORD, temp, hum):    global sta_if    sta_if = network.WLAN(network.STA_IF)     # instancia el objeto -sta_if- para controlar la interfaz STA    if not sta_if.isconnected():              # si no existe conexión...        sta_if.active(True)                       # activa el interfaz STA del ESP32        sta_if.connect(SSID, PASSWORD)            # inicia la conexión con el AP        print("Conectando a la red", SSID +"...")        while not sta_if.isconnected():           # ...si no se ha establecido la conexión...            pass                                  # ...repite el bucle...    print("Configuración de red (IP/netmask/gw/DNS):", sta_if.ifconfig())    print("Subiendo información...")        resp = urequests.get("http://api.asksensors.com/write/8YlghUjXACdqJmsWzK31Omqjxku6ojms?module1=" + str(temp) + "&module2=" + str(hum))    print(resp.status_code)    print(resp.text)    print("Información subida a AskSensors...")    # Conexión de prueba# do_connect("<SSID>","<PWD>")r = 30;rMax = 30;wc = WorldClock.WorldClock("<SSID>","<PWD>")wc.getdatetime()rtc = RTC((wc.dateTime[0], wc.dateTime[1], wc.dateTime[2], 0, wc.dateTime[4], wc.dateTime[5], wc.dateTime[6], 0))while True:    if r == rMax:        r = 0        lcd.backlight_on()        lcd.clear()        p0.value(1)        lect = readTemperature()        lcd.move_to(0,0)        lcd.putstr("{2:02d}/{1:02d}/{0:4d} {4:02d}:{5:02d}:{6:2d}".format(*rtc.datetime()))        lcd.move_to(0,1)        lcd.putstr("T: " + str(lect[0]) + " C, H: " + str(lect[1]) + " %")                upload_temp_hum("<SSID>","<PWD>",lect[0],lect[1])        p0.value(0)        sleep(1)        lcd.backlight_off()    else:        r += 1        p1.value(1)        sleep(0.2)        p1.value(0)        sleep(0.8)